{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red108\green121\blue135;\red24\green24\blue28;\red255\green255\blue255;
\red242\green36\blue140;\red102\green218\blue255;\red208\green168\blue255;\red53\green176\blue216;\red208\green168\blue255;
\red169\green255\blue234;\red86\green208\blue179;\red255\green231\blue109;\red171\green100\blue255;\red171\green100\blue255;
\red169\green255\blue234;\red86\green208\blue179;\red252\green70\blue81;}
{\*\expandedcolortbl;;\csgenericrgb\c42353\c47451\c52941;\csgenericrgb\c9472\c9472\c11000;\csgenericrgb\c100000\c100000\c100000;
\csgenericrgb\c94752\c13993\c54713;\csgenericrgb\c40000\c85490\c100000;\csgenericrgb\c81569\c65882\c100000;\csgenericrgb\c20784\c69020\c84706;\csgenericrgb\c81466\c65692\c100000;
\csgenericrgb\c66399\c100000\c91903;\csgenericrgb\c33726\c81569\c70196;\csgenericrgb\c100000\c90556\c42780;\csgenericrgb\c66997\c39255\c100000;\csgenericrgb\c67059\c39216\c100000;
\csgenericrgb\c66275\c100000\c91765;\csgenericrgb\c33577\c81593\c70189;\csgenericrgb\c98824\c27451\c31765;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\deftab890
\pard\tx890\pardeftab890\partightenfactor0

\f0\fs36 \cf2 \cb3 //\cf4 \
\cf2 //  DisclosureWidgets.swift\cf4 \
\cf2 //  DisclosureWidgets\cf4 \
\cf2 //\cf4 \
\cf2 //  Created by Tyson Freeze on 3/21/24.\cf4 \
\cf2 //\cf4 \
\

\f1\b \cf5 import
\f0\b0 \cf4  WidgetKit\

\f1\b \cf5 import
\f0\b0 \cf4  SwiftUI\

\f1\b \cf5 import
\f0\b0 \cf4  SwiftData\
\

\f1\b \cf5 struct
\f0\b0 \cf4  \cf6 Provider\cf4 : \cf7 AppIntentTimelineProvider\cf4  \{\
    \cf7 @MainActor\cf4  
\f1\b \cf5 func
\f0\b0 \cf4  \cf8 placeholder\cf4 (\cf8 in\cf4  context: \cf9 Context\cf4 ) -> \cf10 SimpleEntry\cf4  \{\
        \cf10 SimpleEntry\cf4 (\cf11 date\cf4 : \cf9 Date\cf4 (), \cf11 relapses\cf4 : \cf11 getRelapses\cf4 ())\
    \}\
    \
    \cf7 @MainActor\cf4  
\f1\b \cf5 func
\f0\b0 \cf4  \cf8 getSnapshot\cf4 (\cf8 in\cf4  context: \cf9 Context\cf4 , \cf8 completion\cf4 : 
\f1\b \cf5 @escaping
\f0\b0 \cf4  (\cf10 SimpleEntry\cf4 ) -> ()) \{\
        
\f1\b \cf5 let
\f0\b0 \cf4  entry = \cf10 SimpleEntry\cf4 (\cf11 date\cf4 : \cf9 Date\cf4 (), \cf11 relapses\cf4 : \cf11 getRelapses\cf4 ())\
        completion(entry)\
    \}\
    \
    \cf7 @MainActor\cf4  
\f1\b \cf5 func
\f0\b0 \cf4  \cf8 getTimeline\cf4 (\cf8 in\cf4  context: \cf9 Context\cf4 , \cf8 completion\cf4 : 
\f1\b \cf5 @escaping
\f0\b0 \cf4  (\cf9 Timeline\cf4 <Entry>) -> ()) \{\
        
\f1\b \cf5 var
\f0\b0 \cf4  entries: [\cf10 SimpleEntry\cf4 ] = []\
        \
        \cf2 // Generate a timeline consisting of five entries an hour apart, starting from the current date.\cf4 \
        
\f1\b \cf5 let
\f0\b0 \cf4  currentDate = \cf9 Date\cf4 ()\
        
\f1\b \cf5 for
\f0\b0 \cf4  hourOffset 
\f1\b \cf5 in
\f0\b0 \cf4  \cf12 0\cf4  ..< \cf12 5\cf4  \{\
            
\f1\b \cf5 let
\f0\b0 \cf4  entryDate = \cf9 Calendar\cf4 .\cf13 current\cf4 .\cf14 date\cf4 (\cf14 byAdding\cf4 : .\cf13 hour\cf4 , \cf14 value\cf4 : hourOffset, \cf14 to\cf4 : currentDate)!\
            
\f1\b \cf5 let
\f0\b0 \cf4  entry = \cf10 SimpleEntry\cf4 (\cf11 date\cf4 : entryDate, \cf11 relapses\cf4 : \cf11 getRelapses\cf4 ())\
            entries.\cf14 append\cf4 (entry)\
        \}\
        \
        
\f1\b \cf5 let
\f0\b0 \cf4  timeline = \cf9 Timeline\cf4 (\cf14 entries\cf4 : entries, \cf14 policy\cf4 : .\cf13 atEnd\cf4 )\
        completion(timeline)\
    \}\
    \
    \cf7 @MainActor\cf4 \
    
\f1\b \cf5 private
\f0\b0 \cf4  
\f1\b \cf5 func
\f0\b0 \cf4  \cf8 getRelapses\cf4 () -> [\cf15 Relapse\cf4 ] \{\
        
\f1\b \cf5 guard
\f0\b0 \cf4  
\f1\b \cf5 let
\f0\b0 \cf4  modelContainer = 
\f1\b \cf5 try
\f0\b0 \cf4 ? \cf7 ModelContainer\cf4 (\cf14 for\cf4 : \cf15 Relapse\cf4 .
\f1\b \cf5 self
\f0\b0 \cf4 ) 
\f1\b \cf5 else
\f0\b0 \cf4  \{\
            
\f1\b \cf5 return
\f0\b0 \cf4  []\
        \}\
        
\f1\b \cf5 let
\f0\b0 \cf4  descriptor = \cf9 FetchDescriptor\cf4 <\cf15 Relapse\cf4 >()\
        
\f1\b \cf5 let
\f0\b0 \cf4  relapses = 
\f1\b \cf5 try
\f0\b0 \cf4 ? modelContainer.\cf13 mainContext\cf4 .\cf14 fetch\cf4 (descriptor)\
        \
        
\f1\b \cf5 return
\f0\b0 \cf4  relapses ?? []\
    \}\
\}\
\

\f1\b \cf5 struct
\f0\b0 \cf4  \cf6 SimpleEntry\cf4 : \cf7 TimelineEntry\cf4  \{\
    
\f1\b \cf5 let
\f0\b0 \cf4  \cf8 date\cf4 : \cf9 Date\cf4 \
    
\f1\b \cf5 let
\f0\b0 \cf4  \cf8 relapses\cf4 : [\cf15 Relapse\cf4 ]\
\}\
\

\f1\b \cf5 struct
\f0\b0 \cf4  \cf6 DisclosureWidgetsEntryView\cf4  : \cf7 View\cf4  \{\
    \cf9 @Environment\cf4 (\\.\cf13 widgetFamily\cf4 ) 
\f1\b \cf5 var
\f0\b0 \cf4  \cf8 widgetFamily\cf4 \
    
\f1\b \cf5 var
\f0\b0 \cf4  \cf8 entry\cf4 : \cf10 Provider\cf4 .Entry\
    \
    
\f1\b \cf5 var
\f0\b0 \cf4  \cf8 body\cf4 : 
\f1\b \cf5 some
\f0\b0 \cf4  \cf7 View\cf4  \{\
        
\f1\b \cf5 switch
\f0\b0 \cf4  \cf16 widgetFamily\cf4  \{\
        
\f1\b \cf5 case
\f0\b0 \cf4  .\cf13 systemSmall\cf4 :\
            \cf9 HStack\cf4  \{\
                \cf10 MetricView\cf4 (\cf11 number\cf4 : \cf12 5\cf4 , \cf11 type\cf4 : .\cf16 current\cf4 , \cf11 discreet\cf4 : 
\f1\b \cf5 true
\f0\b0 \cf4 )\
            \}\
            \
        
\f1\b \cf5 case
\f0\b0 \cf4  .\cf13 systemMedium\cf4 :\
            \cf9 HStack\cf4  \{\
                \cf10 StreakView\cf4 (\cf11 average\cf4 : \cf12 1\cf4 , \cf11 current\cf4 : \cf12 1\cf4 )\
            \}\
        
\f1\b \cf5 case
\f0\b0 \cf4  .\cf13 accessoryRectangular\cf4 :\
            \cf9 HStack\cf4 \{\
                \cf9 VStack\cf4 (\cf14 spacing\cf4 : \cf12 6\cf4 ) \{\
                    \cf9 Text\cf4 (\cf17 "Days Sober"\cf4 )\
                    \cf9 Text\cf4 (\cf17 "Average Days"\cf4 )\
                \}\
                \cf9 VStack\cf4  \{\
                    \cf9 Text\cf4 (\cf9 String\cf4 (\cf12 7\cf4 ))\
                    \cf9 Text\cf4 (\cf9 String\cf4 (\cf12 100\cf4 ))\
                \}\
                .\cf14 font\cf4 (.\cf14 system\cf4 (\cf14 size\cf4 : \cf12 20\cf4 ))\
                .\cf14 fontWeight\cf4 (.\cf13 heavy\cf4 )\
            \}\
        
\f1\b \cf5 default
\f0\b0 \cf4 :\
            \cf9 Text\cf4 (\cf17 "Not Implemented"\cf4 )\
        \}\
    \}\
\}\
\

\f1\b \cf5 struct
\f0\b0 \cf4  \cf6 DisclosureWidgets\cf4 : \cf7 Widget\cf4  \{\
    \cf2 //    let kind: String = "DisclosureWidgets"\cf4 \
    \
    
\f1\b \cf5 var
\f0\b0 \cf4  \cf8 body\cf4 : 
\f1\b \cf5 some
\f0\b0 \cf4  \cf7 WidgetConfiguration\cf4  \{\
        \cf9 AppIntentConfiguration\cf4 (\cf14 kind\cf4 : \cf17 "DisclosureWidgets"\cf4 , \cf14 intent\cf4 : SelectColorIntent, \cf14 provider\cf4 : \cf10 Provider\cf4 ()) \{ entry 
\f1\b \cf5 in
\f0\b0 \cf4 \
            \cf10 DisclosureWidgetsEntryView\cf4 (\cf10 entry\cf4 : entry)\
\cf2 //                .containerBackground(.background, for: .widget)\cf4 \
            \
        \}\
        .\cf14 supportedFamilies\cf4 ([.\cf13 systemSmall\cf4 ])\
    \}\
\}\
\
\cf14 #Preview\cf4 (\cf17 "small"\cf4 , \cf14 as\cf4 : .\cf13 systemSmall\cf4 ) \{\
    \cf10 DisclosureWidgets\cf4 ()\
\} \cf14 timeline\cf4 : \{\
    \cf10 SimpleEntry\cf4 (\cf11 date\cf4 : .\cf13 now\cf4 , \cf11 relapses\cf4 : [])\
    \cf10 SimpleEntry\cf4 (\cf11 date\cf4 : .\cf13 now\cf4 , \cf11 relapses\cf4 : [])\
\}\
\
\cf14 #Preview\cf4 (\cf17 "medium"\cf4 , \cf14 as\cf4 : .\cf13 systemMedium\cf4 ) \{\
    \cf10 DisclosureWidgets\cf4 ()\
\} \cf14 timeline\cf4 : \{\
    \cf10 SimpleEntry\cf4 (\cf11 date\cf4 : .\cf13 now\cf4 , \cf11 relapses\cf4 : [])\
    \cf10 SimpleEntry\cf4 (\cf11 date\cf4 : .\cf13 now\cf4 , \cf11 relapses\cf4 : [])\
\}\
\
\cf14 #Preview\cf4 (\cf17 "rectangular"\cf4 , \cf14 as\cf4 : .\cf13 accessoryRectangular\cf4 ) \{\
    \cf10 DisclosureWidgets\cf4 ()\
\} \cf14 timeline\cf4 : \{\
    \cf10 SimpleEntry\cf4 (\cf11 date\cf4 : .\cf13 now\cf4 , \cf11 relapses\cf4 : [])\
    \cf10 SimpleEntry\cf4 (\cf11 date\cf4 : .\cf13 now\cf4 , \cf11 relapses\cf4 : [])\
\}\
\

\f1\b \cf5 extension
\f0\b0 \cf4  \cf6 Date\cf4  \{\
    
\f1\b \cf5 static
\f0\b0 \cf4  
\f1\b \cf5 func
\f0\b0 \cf4  \cf8 from\cf4 (\cf8 year\cf4 : \cf9 Int\cf4 , \cf8 month\cf4 : \cf9 Int\cf4 , \cf8 day\cf4 : \cf9 Int\cf4 , \cf8 hour\cf4 : \cf9 Int\cf4 ? = 
\f1\b \cf5 nil
\f0\b0 \cf4 , \cf8 minute\cf4 : \cf9 Int\cf4 ? = 
\f1\b \cf5 nil
\f0\b0 \cf4 , \cf8 timeZoneOffset\cf4 : \cf9 Int\cf4  = \cf12 7\cf4 ) -> \cf9 Date\cf4  \{\
        
\f1\b \cf5 let
\f0\b0 \cf4  components = \cf9 DateComponents\cf4 (\cf14 year\cf4 : year, \cf14 month\cf4 : month, \cf14 day\cf4 : day, \cf14 hour\cf4 : hour, \cf14 minute\cf4 : minute)\
        
\f1\b \cf5 return
\f0\b0 \cf4  \cf9 Calendar\cf4 .\cf13 current\cf4 .\cf14 date\cf4 (\cf14 from\cf4 :components)!.\cf14 addingTimeInterval\cf4 (\cf9 TimeInterval\cf4 (timeZoneOffset * \cf12 60\cf4  * \cf12 60\cf4 ))\
    \}\
\}\
\

\f1\b \cf5 struct
\f0\b0 \cf4  \cf6 TestData\cf4  \{\
    
\f1\b \cf5 static
\f0\b0 \cf4  
\f1\b \cf5 let
\f0\b0 \cf4  \cf8 spreadsheet\cf4 : [\cf15 Relapse\cf4 ] = [\
        \cf15 Relapse\cf4 (\cf11 date\cf4 : \cf9 Date\cf4 .\cf11 from\cf4 (\cf11 year\cf4 : \cf12 2024\cf4 , \cf11 month\cf4 : \cf12 3\cf4 , \cf11 day\cf4 : \cf12 16\cf4 ), \cf11 intensity\cf4 : \cf12 8\cf4 , \cf11 compulsivity\cf4 : \cf12 6\cf4 , \cf11 notes\cf4 : \cf17 "I need to figure out a way to handle mental relapse. If I can wait it out I can get back to meeting and managing."\cf4 ),\
        \cf15 Relapse\cf4 (\cf11 date\cf4 : \cf9 Date\cf4 .\cf11 from\cf4 (\cf11 year\cf4 : \cf12 2024\cf4 , \cf11 month\cf4 : \cf12 3\cf4 , \cf11 day\cf4 : \cf12 13\cf4 ), \cf11 intensity\cf4 : \cf12 1\cf4 , \cf11 compulsivity\cf4 : \cf12 4\cf4 , \cf11 notes\cf4 : \cf17 "I think I was just tired, 7 or 6 hours instead of the ideal 9. Low shame, just got to keep moving forward. Chances are good Mar will be much better than Feb."\cf4 , \cf11 triggers\cf4 : [\cf17 "Tiredness"\cf4 , \cf17 "Hunger"\cf4 ])\
        \cf2 //        Relapse(date: Date.from(year: 2024, month: 3, day: 2), reminder: true, intensity: 5, compulsivity: 3, notes: "I was a little hungry, just finished taxes. Low compulsion, I just wanted to more than I didn\'92t. (TikTok)", triggers: ["Bored", "Hunger"]),\cf4 \
        \cf2 //        Relapse(date: Date.from(year: 2024, month: 3, day: 2), intensity: 7, compulsivity: 5, notes: "I had eaten. Just shame I think.", triggers: ["Anger"]),\cf4 \
        \cf2 //        //February\cf4 \
        \cf2 //        Relapse(date: Date.from(year: 2024, month: 2, day: 3), intensity: 2, compulsivity: Int.random(in: 1...10)),\cf4 \
        \cf2 //        Relapse(date: Date.from(year: 2024, month: 2, day: 5), intensity: 6, compulsivity: Int.random(in: 1...10)),\cf4 \
        \cf2 //        Relapse(date: Date.from(year: 2024, month: 2, day: 5), intensity: 8, compulsivity: Int.random(in: 1...10)),\cf4 \
        \cf2 //        Relapse(date: Date.from(year: 2024, month: 2, day: 10), intensity: 2, compulsivity: Int.random(in: 1...10)),\cf4 \
        \cf2 //        Relapse(date: Date.from(year: 2024, month: 2, day: 17), intensity: 4, compulsivity: Int.random(in: 1...10)),\cf4 \
        \cf2 //        Relapse(date: Date.from(year: 2024, month: 2, day: 20), intensity: 2, compulsivity: Int.random(in: 1...10)),\cf4 \
        \cf2 //        Relapse(date: Date.from(year: 2024, month: 2, day: 26), intensity: 10, compulsivity: Int.random(in: 1...10)),\cf4 \
        \cf2 //        Relapse(date: Date.from(year: 2024, month: 2, day: 26), intensity: 8, compulsivity: Int.random(in: 1...10))\cf4 \
    ]\
\}\
}